TODO----------------


*************************


-persist nested collection field

-reflection sur insertOrUpdate, persist (bien fondé)

-reflection insert bien implementé.

-Bosser le theoreme de jointure d'hibernate

-Manage Join
    *OneToOne
    *OneToMany
    *ManyToOne
    *ManyToMany

-SQLiteModel, create partial projection model (fromClass(projection),fromObject(projection))

-Support
    Advanced SQL: look for doc oka drive

TableFactory
    *Handle ALTER_TABLE

-public getter for clause vars

-SQLiteAsyncExecutor should return itemList for insert, persist, merge.

-SQLiteAsyncExecutor add promise philosophy.

-find a way to implement AVG, SUM

-allow where rawQuery as Where Param

-make ClauseJoinSelectBuilder and ClauseBuilder familiar inside a beautiful Abstract genericity

DOING----------------------------
-Selection.fetch
-SQLiteDataAccess.getGivenVersion: getLastKnownVersion



DONE-----------------------------
-revisiter update table SET AS(object)


TESTING-------------------------------
-if an sql instance is transactionnal and auto closable, close transaction and db safelly. (reflection)
-Nested selection as where param.
-implement selection negation [NOT] in where clause.
-sql.useSerializer()
-implements having
GROUP BY meetingID
HAVING COUNT(caseID) < 4 AND COUNT(caseID) > 2
-Serializers as HashMap<Class,Serialize>
-TableExecutor
    *fill and implement all method
-Query builder
    *add GroupBy
    *add OrderBy
    *add Having/havingCount
-Create ObjectFactory like CursorFactory, to spécify a way to convert cursor to Object.

FINISH---------------------------


ABORTED--------------------------
-sql.useExecutor()

